// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain



struct data
{
    //simulation parameters
    int simRange;
    bool simulating;
    bool resetMap;
};

struct BrushType
{
    //brush parameteres
    float strength;
    int brushRange;
    uint2 brushCenter;    
};


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> Result; //black white
RWTexture2D<float> Source;//black white


StructuredBuffer<data> simBuffer;
StructuredBuffer<BrushType> brush;
StructuredBuffer<float> coeff;

#define COEFFMAXRANGE  10
#define COEEFWIDTH (COEFFMAXRANGE*2 + 1)


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (!simBuffer[0].resetMap) {
        if (simBuffer[0].simulating) {

            uint3 pos;
            pos.z = 0;

            float sum = 0.0;
            //search in square
            for (int i = -simBuffer[0].simRange; i <= simBuffer[0].simRange; i++) {
                for (int j = -simBuffer[0].simRange; j <= simBuffer[0].simRange; j++) {

                    pos.x = id.x + i;
                    pos.y = id.y + j;

                    if ((float)distance(pos, id) <= simBuffer[0].simRange) { //if in range
                        sum += Source[pos.xy] * coeff[COEEFWIDTH * (i + COEFFMAXRANGE) + j + COEFFMAXRANGE];
                    }
                }
            }
            //simple clamp
            if (sum > 1.0) sum = 1;
            if (sum < 0.0)   sum = 0;

            Result[id.xy] = sum;

        }
        else {
            Result[id.xy] = Source[id.xy];
        }
    }
    else {
        Result[id.xy] = float4(0, 0, 0, 0);
    }

    //when brushing add val
    if ((float)distance(id, brush[0].brushCenter) < brush[0].brushRange) {
        Result[id.xy] += brush[0].strength;        
    }
}

